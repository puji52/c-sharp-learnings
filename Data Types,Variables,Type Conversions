-->C# is known as a strongly-typed language 
-->The functions do the following:
capitalize: will turn lowercase characters into uppercase characters
square: will square a number
evaluate: will determine if an input is true or false
-->The data types include:
int - whole numbers, like: 1, -56, 948,Size (bytes):4
float - Floating point numbers like:3.4,5.9,Size (bytes):4
double - decimal numbers(more precise than float), like: 239.43909, -660.01,Size (bytes):8
char - single characters, like: “a”, “&”, “£”,Size (bytes):2
string - string of characters, like: “dog”, “hello world”,Size (bytes):2 (per char)
bool - boolean values, like: true or false,Size (bytes):1
-->Declare a variable:
string countryName = "India";
-->creating variables with types
using System;
namespace Form
{
  class Program
  {
    static void Main(string[] args)
    {
      // Create Variables
      string name="Shadow";
      string breed="Golden Retriever";
      int age=5;
      double weight=65.22;
      bool spayed=true;
      Console.WriteLine(name);
      // Print variables to the console
      Console.WriteLine(breed);
      Console.WriteLine(age);
      Console.WriteLine(weight);
      Console.WriteLine(spayed);
    }
  }
}
-->Handling Errors 
(9,7) indicates that the error is on line 9, beginning at the 7th character (including spaces)
— Variables can only contain underscores, letters, and digits. It’s also good practice to use camelCase styling
-->Type Conversion:
implicit conversion: happens automatically if no data will be lost in the conversion. That’s why it’s possible to convert an int (which can hold less data) to a double 
(which can hold more), but not the other way around.
Ex:int positiveInt = 3;
// Turn it into a double
double positiveDouble = positiveInt;
explicit conversion: requires a cast operator to convert a data type into another one. If we do want to convert a double to an int, we could use the operator (int).
Ex:double positiveDouble = 3.75
double negativeDouble = -3.75;
// casting double to int truncates the decimal portion
int positiveInt = (int)positiveDouble; // 3
int negativeInt = (int)negativeDouble; // -3
-->Converting Data Types
using System;
namespace FavoriteNumber
{
  class Program
  {
    static void Main(string[] args)
    {
      // Ask user for fave number
      Console.Write("Enter your favorite number!: ");

      // Turn that answer into an int
      
      // Attempt 1: use implicit conversion
      // int faveNumber = Console.ReadLine();
      
      // Attempt 2: use explicit conversion
      // int faveNumber = (int)Console.ReadLine();
      
      // Attempt 3: use Convert method
      int faveNumber = Convert.ToInt32(Console.ReadLine());
    }
  }
}












