class:
class Gear 
{

}
object instantiation: Gear g= new Gear();

->Fields are a type of class member.
Creation of fields://In the code above, we haven’t set the value of either field, so they have default values. 
For instance, string defaults to null, and int defaults to 0.
class Item {
  public string description;
  public int count;
}
->Once we create an Item instance, we can access and modify each field using dot notation.

Methods:
->Another type of class member is methods.
 
 this keyword:Using the this keyword, we can refer to the current instance of a class inside its methods.

 Constructors:
 runs every time an object is created.
 ->If no constructor is defined, C# provides a default parameterless constructor, allowing us to instantiate objects without errors:
Project blank = new Project();
->A constructor looks like a method but lacks a return type and has the same name as its class. 
->class Polygon
{
  public int sides;

  public Polygon(int sides)
  {
    this.sides = sides;
  }
}
Polygon pentagon = new Polygon(5);
// pentagon.sides is 5

->this.sides refers to the instance variable.
sides without this refers to the argument (parameter) passed to the constructor.
So, this.sides = sides; means "assign the value of the parameter sides to the instance variable sides of the object being created." 
This ensures that the instance variable gets the correct value passed as an argument.

Overloading Constructors:

constructors can be overloaded. For example, the following Book class has 2 constructor methods defined — one that takes 2 arguments and 
another that takes only 1:

public class Book
{
  public string title;
  public string author;

  public Book(string title, string author)
  {
    this.title = title;
    this.author = author;
  }

  public Book(string title)
  {
    this.title = title;
    this.author = "Unknown";
  }
}
The first constructor sets values for both fields, and the second provides a default value for when the author is not specified. 
We can create Book instances in two ways:
Book b1 = new Book("1984", "George Orwell");
Book b2 = new Book("Untitled");

->Note that there is duplicated code between the 2 constructors (this.title = title;). To avoid this redundancy, we have two options:
1.Use Default Arguments:
public Book(string title, string author = "Unknown")
{
  this.title = title;
  this.author = author;
}

2.->Use ": this()" to refer to another constructor in the same class. This is useful when the second constructor has additional functionality
EX:
public Book(string title, string author)
{
  this.title = title;
  this.author = author;
}

public Book(string title) : this(title, "Unknown")
{
  Console.WriteLine("Author not specified. Value defaulted to 'Unknown'.");
}


